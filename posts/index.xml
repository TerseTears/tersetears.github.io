<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on TerseTears&#39;s Blog</title>
    <link>http://tersetears.github.io/posts/</link>
    <description>Recent content in Posts on TerseTears&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 05 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://tersetears.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Short Comparison of Julia Optimization Frameworks</title>
      <link>http://tersetears.github.io/posts/julia-opt-benchmarks/</link>
      <pubDate>Fri, 05 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>http://tersetears.github.io/posts/julia-opt-benchmarks/</guid>
      <description>Introduction This is a short comparison of the mathematical optimization facilities of the Julia language, where I compare JuMP.jl, Optim.jl, and Optimization.jl libraries.
using JuMP using Optim using Optimization using OptimizationOptimJL using OptimizationNLopt using BenchmarkTools import Ipopt import NLopt # Booth function. The three frameworks require different specifications. booth(x1, x2) = (x1 + 2x2 - 7)^2 + (2x1 + x2 -5)^2 booth_vector(x) = (x[1] + 2x[2] - 7)^2 + (2x[1] + x[2] -5)^2 booth_parameters(x, p) = (x[1] + 2x[2] - 7)^2 + (2x[1] + x[2] -5)^2; JuMP.</description>
    </item>
    
    <item>
      <title>Journey Through `tyecon`: Predictions on Recipe Nutritions</title>
      <link>http://tersetears.github.io/posts/journey-through-tyecon/predict-nutrs/</link>
      <pubDate>Sat, 02 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>http://tersetears.github.io/posts/journey-through-tyecon/predict-nutrs/</guid>
      <description>Introduction In this second part of the &amp;ldquo;journey through tyecon&amp;rdquo; series, I want to showcase the package&amp;rsquo;s facilities in simplifying tasks common to the predictive modelling part of data analysis. I will be using the Food.com dataset as before.
Setup and Data Import library(tidyverse) library(tidyselect) library(magrittr) library(vroom) library(tyecon) library(rsample) library(yardstick) library(glmnet) library(earth) library(pls) knitr::opts_chunk$set(fig.path = &amp;#34;&amp;#34;) knitr::opts_chunk$set(dev = &amp;#39;svg&amp;#39;) theme_set(theme_light()) set.seed(123) recipes &amp;lt;- vroom(&amp;#34;~/Workspace/foodrecipes/RAW_recipes.csv&amp;#34;) interacts &amp;lt;- vroom(&amp;#34;~/Workspace/foodrecipes/RAW_interactions.csv&amp;#34;) Nutrition values, except for calories, are all percent of daily value, a daily quota filled by the amount of the percentage by the consumption of the specific food.</description>
    </item>
    
    <item>
      <title>Journey Through `tyecon`: Exploring Food.com Tags</title>
      <link>http://tersetears.github.io/posts/journey-through-tyecon/explore-tags/</link>
      <pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>http://tersetears.github.io/posts/journey-through-tyecon/explore-tags/</guid>
      <description>Introduction I&amp;rsquo;ve been working on my R package, tyecon for some time now. I think it can be a useful tool in performing day to day data analysis tasks. The idea is very simple: More higher order macros. There&amp;rsquo;s no reason to focus on the handful of existing ones, like the magrittr pipes or the dplyr syntax. We have a language here that supports lazy evaluation and first class functions. This is all we need to make programming life easier.</description>
    </item>
    
    <item>
      <title>dplyr Cheatsheet to DataFrames.jl Page 2</title>
      <link>http://tersetears.github.io/posts/dplyr-dataframes-part2/</link>
      <pubDate>Sat, 13 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>http://tersetears.github.io/posts/dplyr-dataframes-part2/</guid>
      <description>Continuing Where We Left This post shows how to translate the second page of the dplyr cheatsheet to DataFrames.jl and Julia commnads.
using RDatasets, RCall, DataFrames, StatsBase, Statistics R&amp;#34;library(tidyverse)&amp;#34;; Setting up the data using RCall mpg = dataset(&amp;#34;ggplot2&amp;#34;, &amp;#34;mpg&amp;#34;); Vectorized Functions lag, lead julia&amp;gt; R&amp;#34;&amp;#34;&amp;#34; mutate(mpg, leadyear = lead(year)) %&amp;gt;% select(year, leadyear) %&amp;gt;% tail &amp;#34;&amp;#34;&amp;#34; RObject{VecSxp} # A tibble: 6 x 2 year leadyear &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; 1 1999 2008 2 2008 2008 3 2008 1999 4 1999 1999 5 1999 2008 6 2008 NA In Julia:</description>
    </item>
    
    <item>
      <title>dplyr Cheatsheet to DataFrames.jl Page 1</title>
      <link>http://tersetears.github.io/posts/dplyr-dataframes/</link>
      <pubDate>Tue, 02 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>http://tersetears.github.io/posts/dplyr-dataframes/</guid>
      <description>Introduction With the release of v1.0 of the DataFrames.jl package, it would seem appropriate to introduce a rather comprehensive cheatsheet of it. One that is of special use to people who come from tidyverse (arguably, the best data transformation syntax there is for combined expressiveness and brevity).
The order of topics is the same as dplyr cheatsheet.
using RDatasets, RCall, DataFrames, StatsBase, InteractiveErrors R&amp;#34;library(dplyr)&amp;#34;; Setting up the data using RCall data = dataset(&amp;#34;datasets&amp;#34;, &amp;#34;iris&amp;#34;) @rput data; Summarize Cases summarize julia&amp;gt; R&amp;#34;summarize(data, avSL = mean(SepalLength), avSW = mean(SepalWidth))&amp;#34; RObject{VecSxp} avSL avSW 1 5.</description>
    </item>
    
    <item>
      <title>Julia Frustrations and Fixes Part III: Do-While Loops</title>
      <link>http://tersetears.github.io/posts/while-loops/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>http://tersetears.github.io/posts/while-loops/</guid>
      <description>Simple Iterations The goal is to solve the below expression iteratively for f(x):
$$ f(x) = β\left(f(x)+x\right) $$
Of course, we know what the answer is already, for comparison:
β = 0.8 f(x) = 1/(1-β)*β*x x = 0.1:0.1:10; The original way Using a while loop can be ugly, since there isn&amp;rsquo;t a do-while syntax in Julia. One needs to specify a true case first and check convergence later:
fcomp, iter = let v_ = zeros(length(x)), i = 0 while true v = β*(v_+x) i=i+1 maximum(abs.</description>
    </item>
    
    <item>
      <title>Julia Frustrations and Fixes Part II: Clearing Variables</title>
      <link>http://tersetears.github.io/posts/clear-variables/</link>
      <pubDate>Fri, 09 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>http://tersetears.github.io/posts/clear-variables/</guid>
      <description>Main Issue Variables kept from previous runs of a script can be the culprit behind all sorts of bugs when developing from the REPL. Consider this simple case:
Simple example Let&amp;rsquo;s say I define y somewhere in the code:
y = 50 50 Now I define another function that really is supposed to just sum two values, but I forgot to also change the name of the second variable in the function call:</description>
    </item>
    
    <item>
      <title>Julia Frustrations and Fixes Part I: REPL Errors</title>
      <link>http://tersetears.github.io/posts/repl-errors/</link>
      <pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>http://tersetears.github.io/posts/repl-errors/</guid>
      <description>Main issue An issue with the REPL workflow is that When sending a script (or any chunks) to the REPL, lines that produce error simply output that error and the REPL simply continues to execute the following lines. This can be quite problematic since we may not know why something isn&amp;rsquo;t working. Consider this example:
Error output y = 5 y = y^x # ERROR: UndefVarError: x not defined ERROR: UndefVarError: x not defined map(x-&amp;gt;x, 1:100) 100-element Vector{Int64}: 1 2 3 4 5 6 7 8 9 10 ⋮ 92 93 94 95 96 97 98 99 100 z = y 5 Interactive errors The way to solve this issue is to use the InteractiveErrors package, which halts the REPL until further action is taken:</description>
    </item>
    
    <item>
      <title>Upcoming Blog Posts</title>
      <link>http://tersetears.github.io/posts/upcoming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://tersetears.github.io/posts/upcoming/</guid>
      <description>Frustrations and Fixes for Julia Series Cumbersome globals, bug-inducing as well (Ricatti solver issue) Terrible pipe operator weird choice of having map take function first then data, even though map is a data function itself. This causes issues with the pipe operator idea as well. Column-major vs row-major Need good internet for adding packages (can&amp;rsquo;t use it effectively when outside of town) Poor but understandable reshaping of vectors of vectors into matrices (especially for multidimensional arrays) Unnamed vectors, no annotations possible returning multiple values from map in consistent way.</description>
    </item>
    
  </channel>
</rss>
